buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'

// #####################################################################################################################
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'idea'
apply plugin: 'maven-publish'

version = '0.0.1'
group = 'lordfokas.cartography'
archivesBaseName = 'cartography'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {

    // This is TFC's extra special system, look at their readme for info
    def useOfficialVersion = System.getenv("OFFICIAL_MAPPINGS")
    if (useOfficialVersion == null) {
        mappings channel: 'snapshot', version: mappings_version
    } else {
        mappings channel: 'official', version: minecraft_version
    }

    // Run configurations.
    runs {
        client {
            workingDirectory project.file('run-client')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP' // Recommended logging data for a userdev environment
            property 'forge.logging.console.level', 'debug' // Recommended logging level for the console
            property 'mixin.env.disableRefMap', 'true' // don't map mixin references from dependencies

            mods {
                cartography {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run-server')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP' // Recommended logging data for a userdev environment
            property 'forge.logging.console.level', 'debug' // Recommended logging level for the console
            property 'mixin.env.disableRefMap', 'true' // don't map mixin references from dependencies

            mods {
                cartography {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Include files from /libs
repositories {
    flatDir { dirs 'libs' }
    mavenLocal()
}


// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
// http://www.gradle.org/docs/current/userguide/dependency_management.html
dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    runtimeOnly fg.deobf('tfc:TerraFirmaCraft-Forge:1.16.5-dev')
    runtimeOnly fg.deobf('jm:journeymap:1.16.5-5.7.1')
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "cartography",
            "Specification-Vendor": "lordfokas",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"lordfokas",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}